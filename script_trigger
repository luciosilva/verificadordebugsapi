SELECT * FROM TFS_CONFIGS

UPDATE TFS_CONFIGS
SET password = 'Consultoria@1646'



SELECT * FROM BUGS_GROUPS_CONFIGS

SELECT * FROM BUGS_GROUPS_CONFIGS;
select * from bugs;

DROP TRIGGER generate_history
DROP FUNCTION generate_history;

CREATE FUNCTION generate_history() RETURNS trigger AS $generate_history$
	DECLARE
		V_GROUPS_CONFIG_ID 	BUGS_GROUPS_CONFIGS.GROUPS_CONFIG_ID%TYPE;
		V_GROUP_NAME 		GROUPS_CONFIGS.NAME%TYPE;
    BEGIN
        IF (TG_OP = 'INSERT') THEN
            SELECT GROUPS_CONFIG_ID,GROUPS_CONFIGS.NAME INTO V_GROUPS_CONFIG_ID, V_GROUP_NAME
            FROM BUGS_GROUPS_CONFIGS
            INNER JOIN GROUPS_CONFIGS
            ON BUGS_GROUPS_CONFIGS.GROUPS_CONFIG_ID = GROUPS_CONFIGS.ID
            WHERE BUGS_GROUPS_CONFIGS.BUG_ID = NEW.ID;

            INSERT INTO BUGS_HISTORIES
            (ID,NAME,TITLE,URL,DT_CREATED,DT_RESOLUTION,SUBPROJECT,
             ENVIRONMENT,ID_GROUPS_CONFIGS,NAME_GROUPS_CONFIGS,CREATED_AT,UPDATED_AT)
            VALUES
            (NEW.ID,NEW.NAME,NEW.TITLE,NEW.URL,NEW.DT_CREATED,NEW.DT_RESOLUTION,NEW.SUBPROJECT,
            NEW.ENVIRONMENT,V_GROUPS_CONFIG_ID,V_GROUP_NAME,CURRENT_DATE,CURRENT_DATE)
            ON CONFLICT DO NOTHING;
        END IF;
        RETURN NEW;
    END;
$generate_history$ LANGUAGE plpgsql;

CREATE TRIGGER generate_history BEFORE INSERT OR UPDATE ON bugs
    FOR EACH ROW EXECUTE PROCEDURE generate_history();


SELECT * FROM BUGS
SELECT * FROM BUGS_HISTORIES




